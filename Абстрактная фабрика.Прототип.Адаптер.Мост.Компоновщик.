Абстрактная фабрика
    abstract class Fuel
    {
        public abstract void ToFill();
    }
    abstract class Movement
    {
        public abstract void Move();
    }
    class NuclearFuel : Fuel
    {
        public override void ToFill()
        {
            Console.WriteLine("Заправляем ядерным топливом!");
        }
    }
    class Gasoline : Fuel
    {
        public override void ToFill()
        {
            Console.WriteLine("Заправляем бензином!");
        }
    }
    class Electric : Fuel
    {
        public override void ToFill()
        {
            Console.WriteLine("Поставили на зарядку!");
        }
    }
    class FlyMovement : Movement
    {
        public override void Move()
        {
            Console.WriteLine("Летим");
        }
    }
    class DriveMovement : Movement
    {
        public override void Move()
        {
            Console.WriteLine("Едем");
        }
    }
    class NuclearFuelCarFactory : CarFactory
    {
        public override Movement CreateVehicle()
        {
            return new DriveMovement();
        }
 
        public override Fuel FuelVehicle()
        {
            return new NuclearFuel();
        }
    }
    class GasolineCarFactory : CarFactory
    {
        public override Movement CreateVehicle()
        {
            return new DriveMovement();
        }
 
        public override Fuel FuelVehicle()
        {
            return new Gasoline();
        }
    }
    class ElectricCarFactory : CarFactory
    {
        public override Movement CreateVehicle()
        {
            return new FlyMovement();
        }
 
        public override Fuel FuelVehicle()
        {
            return new Electric();
        }
    }
    abstract class CarFactory
    {
        public abstract Movement CreateVehicle();
        public abstract Fuel FuelVehicle();
    }
    class Car
    {
        private Fuel fuel;
        private Movement car;
        public Car(CarFactory factory)
        {
            car = factory.CreateVehicle();
            fuel = factory.FuelVehicle();
        }
        public void Drive()
        {
            car.Move();
        }
        public void Fuel()
        {
            fuel.ToFill();
        }
    }
    class Program
    {
        static void Main()
        {
            Car electricCar = new Car(new ElectricCarFactory());
            electricCar.Drive();
            electricCar.Fuel();
 
            Car gasolineCar = new Car(new GasolineCarFactory());
            gasolineCar.Drive();
            gasolineCar.Fuel();
        }
    }
    
electric_factory = ElectricCarFactory()
petrol_factory = PetrolCarFactory()
hybrid_factory = HybridCarFactory()

electric_car = electric_factory.produce_car()
petrol_car = petrol_factory.produce_car()
hybrid_car = hybrid_factory.produce_car()

electric_car.drive()
petrol_car.drive()
hybrid_car.drive()
паттерн Прототип
import copy

class Заказ:
    def __init__(self, номер, товары, сумма):
        self.номер = номер
        self.товары = товары
        self.сумма = сумма

    def клонировать(self):
        return copy.deepcopy(self)

прототип_заказа = Заказ("1", ["товар1", "товар2"], 100)

новый_заказ = прототип_заказа.клонировать()
новый_заказ.номер = "2"
новый_заказ.товары = ["товар3", "товар4"]
новый_заказ.сумма = 150
паттерн Адаптер
class DataSource:
    def read_data(self):
        pass

class FileDataSource(DataSource):
    def __init__(self, file_path):
        self.file_path = file_path

    def read_data(self):
        with open(self.file_path, 'r') as file:
            return file.read()

class DatabaseDataSource:
    def __init__(self, connection_string):
        self.connection_string = connection_string

    def fetch_data(self):
        return "Данные из базы данных"

class DatabaseAdapter(DataSource):
    def __init__(self, database_data_source):
        self.database_data_source = database_data_source

    def read_data(self):
        return self.database_data_source.fetch_data()

file_data_source = FileDataSource("example.txt")
file_data = file_data_source.read_data()
print(file_data)

database_data_source = DatabaseDataSource("connection_string")
adapter = DatabaseAdapter(database_data_source)
database_data = adapter.read_data()
print(database_data)
паттерн Мост
class Device:
    def turn_on(self):
        pass

    def turn_off(self):
        pass

    def set_state(self, state):
        pass

class TV(Device):
    def turn_on(self):
        print("Включить телевизор")

    def turn_off(self):
        print("Выключить телевизор")

    def set_state(self, state):
        print(f"Изменить канал на {state}")

class Light(Device):
    def turn_on(self):
        print("Включить лампочку")

    def turn_off(self):
        print("Выключить лампочку")

    def set_state(self, state):
        print(f"Изменить яркость на {state}%")

class RemoteControl:
    def __init__(self, device):
        self.device = device

    def turn_on(self):
        self.device.turn_on()

    def turn_off(self):
        self.device.turn_off()

    def set_state(self, state):
        self.device.set_state(state)

class SonyTV(TV):
    pass

class SamsungTV(TV):
    pass

class PhilipsLight(Light):
    pass

class IKEALight(Light):
    pass

samsung_tv = SamsungTV()
philips_light = PhilipsLight()

remote_control_tv = RemoteControl(samsung_tv)
remote_control_tv.turn_on()
remote_control_tv.set_state("канал 5")

remote_control_light = RemoteControl(philips_light)
remote_control_light.turn_on()
remote_control_light.set_state(50)
паттерн компоновщик
class FileSystemElement:
    def display(self):
        pass

    def get_size(self):
        pass

class File(FileSystemElement):
    def __init__(self, name, size):
        self.name = name
        self.size = size

    def display(self):
        print(f"Файл: {self.name}")

    def get_size(self):
        return self.size

class Directory(FileSystemElement):
    def __init__(self, name):
        self.name = name
        self.elements = []

    def add_element(self, element):
        self.elements.append(element)

    def display(self):
        print(f"Директория: {self.name}")
        for element in self.elements:
            element.display()

    def get_size(self):
        total_size = 0
        for element in self.elements:
            total_size += element.get_size()
        return total_size

file1 = File("file1.txt", 100)
file2 = File("file2.txt", 200)

subdir1 = Directory("Subdir1")
subdir1.add_element(file1)

subdir2 = Directory("Subdir2")
subdir2.add_element(file2)

main_directory = Directory("MainDirectory")
main_directory.add_element(subdir1)
main_directory.add_element(subdir2)

main_directory.display()
print(f"Общий размер файлов: {main_directory.get_size()} байт")

