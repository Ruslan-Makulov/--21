Абстрактная фабрика

abstract class Fuel
{
    public abstract void Fill();
}

abstract class Movement
{
    public abstract void Move();
}

class NuclearFuel : Fuel
{
    public override void Fill()
    {
        Console.WriteLine("Заправляем дизелем!");
    }
}

class Gasoline : Fuel
{
    public override void Fill()
    {
        Console.WriteLine("Заправляем топливом!");
    }
}

class Electric : Fuel
{
    public override void Fill()
    {
        Console.WriteLine("Ставим на зарядку!");
    }
}

class FlyMovement : Movement
{
    public override void Move()
    {
        Console.WriteLine("Летим");
    }
}

class DriveMovement : Movement
{
    public override void Move()
    {
        Console.WriteLine("Едем");
    }
}

abstract class CarFactory
{
    public abstract Movement CreateMovement();
    public abstract Fuel CreateFuel();
}

class NuclearFuelCarFactory : CarFactory
{
    public override Movement CreateMovement()
    {
        return new DriveMovement();
    }

    public override Fuel CreateFuel()
    {
        return new NuclearFuel();
    }
}

class GasolineCarFactory : CarFactory
{
    public override Movement CreateMovement()
    {
        return new DriveMovement();
    }

    public override Fuel CreateFuel()
    {
        return new Gasoline();
    }
}

class ElectricCarFactory : CarFactory
{
    public override Movement CreateMovement()
    {
        return new FlyMovement();
    }

    public override Fuel CreateFuel()
    {
        return new Electric();
    }
}

class Car
{
    private Fuel fuel;
    private Movement movement;

    public Car(CarFactory factory)
    {
        movement = factory.CreateMovement();
        fuel = factory.CreateFuel();
    }

    public void Drive()
    {
        movement.Move();
    }

    public void Fill()
    {
        fuel.Fill();
    }
}

class Program
{
    static void Main(string[] args)
    {
        Car electricCar = new Car(new ElectricCarFactory());
        electricCar.Drive();
        electricCar.Fill();

        Car gasolineCar = new Car(new GasolineCarFactory());
        gasolineCar.Drive();
        gasolineCar.Fill();
    }
}
    
electric_factory = ElectricCarFactory()
petrol_factory = PetrolCarFactory()
hybrid_factory = HybridCarFactory()

electric_car = electric_factory.produce_car()
petrol_car = petrol_factory.produce_car()
hybrid_car = hybrid_factory.produce_car()

electric_car.drive()
petrol_car.drive()
hybrid_car.drive()
паттерн Прототип

import copy

class Order:
    def __init__(self, number, items, total):
        self.number = number
        self.items = items
        self.total = total

    def clone(self):
        return copy.deepcopy(self)

prototype_order = Order("1", ["item1", "item2"], 100)

new_order = prototype_order.clone()
new_order.number = "2"
new_order.items = ["item3", "item4"]
new_order.total = 150

print(prototype_order)
print(new_order)

паттерн Мост
class Device:
    def turn_on(self):
        pass

    def turn_off(self):
        pass

    def set_state(self, state):
        pass

class TV(Device):
    def turn_on(self):
        print("Включить телевизор")

    def turn_off(self):
        print("Выключить телевизор")

    def set_state(self, state):
        print(f"Изменить канал на {state}")

class Light(Device):
    def turn_on(self):
        print("Включить лампочку")

    def turn_off(self):
        print("Выключить лампочку")

    def set_state(self, state):
        print(f"Изменить яркость на {state}%")

class RemoteControl:
    def __init__(self, device):
        self.device = device

    def turn_on(self):
        self.device.turn_on()

    def turn_off(self):
        self.device.turn_off()

    def set_state(self, state):
        self.device.set_state(state)

class SonyTV(TV):
    pass

class SamsungTV(TV):
    pass

class PhilipsLight(Light):
    pass

class IKEALight(Light):
    pass

samsung_tv = SamsungTV()
philips_light = PhilipsLight()

remote_control_tv = RemoteControl(samsung_tv)
remote_control_tv.turn_on()
remote_control_tv.set_state("канал 5")

remote_control_light = RemoteControl(philips_light)
remote_control_light.turn_on()
remote_control_light.set_state(50)
паттерн компоновщик
class FileSystemElement:
    def display(self):
        pass

    def get_size(self):
        pass

class File(FileSystemElement):
    def __init__(self, name, size):
        self.name = name
        self.size = size

    def display(self):
        print(f"Файл: {self.name}")

    def get_size(self):
        return self.size

class Directory(FileSystemElement):
    def __init__(self, name):
        self.name = name
        self.elements = []

    def add_element(self, element):
        self.elements.append(element)

    def display(self):
        print(f"Директория: {self.name}")
        for element in self.elements:
            element.display()

    def get_size(self):
        total_size = 0
        for element in self.elements:
            total_size += element.get_size()
        return total_size

file1 = File("file1.txt", 100)
file2 = File("file2.txt", 200)

subdir1 = Directory("Subdir1")
subdir1.add_element(file1)

subdir2 = Directory("Subdir2")
subdir2.add_element(file2)

main_directory = Directory("MainDirectory")
main_directory.add_element(subdir1)
main_directory.add_element(subdir2)

main_directory.display()
print(f"Общий размер файлов: {main_directory.get_size()} байт")

