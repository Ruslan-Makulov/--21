№1
class Selector:
 def __init__(self, values):
 self.values = values

 def get_odds(self):
 return [value for value in self.values if value % 2 != 0]

 def get_evens(self):
 return [value for value in self.values if value % 2 == 0]

values = [11, 12, 13, 14, 15, 16, 22, 44, 66]
selector = Selector(values)
odds = selector.get_odds()
evens = selector.get_evens()
print(' '.join(map(str, odds)))
print(' '.join(map(str, evens)))
№2
class LeftParagraph:
 def __init__(self, width):
 self.width = width
 self.text = ""

 def add_word(self, word):
 self.text += word + " "

 def end(self):
 print(self.text.ljust(self.width))
        self.text = ""

class RightParagraph:
 def __init__(self, width):
        self.width = width
        self.text = ""

    def add_word(self, word):
        self.text += word + " "

    def end(self):
 print(self.text.rjust(self.width))
 self.text = ""

# Ваш код

lp = LeftParagraph(8)
lp.add_word('abc')
lp.add_word('defg')
lp.add_word('hi')
lp.add_word('jklmnopq')
lp.add_word('r')
lp.add_word('stuv')
lp.end()
print()

rp = RightParagraph(8)
rp.add_word('abc')
rp.add_word('defg')
rp.add_word('hi')
rp.add_word('jklmnopq')
rp.add_word('r')
rp.add_word('stuv')
rp.end()
№3
class AmericanDate:
 def __init__(self, year, month, day):
 self.year = year
 self.month = month
 self.day = day

 def set_year(self, year):
 self.year = year

 def set_month(self, month):
 self.month = month

 def set_day(self, day):
 self.day = day

 def get_year(self):
 return self.year

 def get_month(self):
 return self.month

 def get_day(self):
 return self.day

 def format(self):
 return f"{self.day:02}.{self.month:02}.{self.year}"

class EuropeanDate:
 def __init__(self, year, month, day):
 self.year = year
 self.month = month
 self.day = day

 def set_year(self, year):
 self.year = year

 def set_month(self, month):
 self.month = month

 def set_day(self, day):
 self.day = day

    def get_year(self):
        return self.year

    def get_month(self):
        return self.month

    def get_day(self):
        return self.day

 def format(self):
 return f"{self.month:02}.{self.day:02}.{self.year}"

# Ваш код

american = AmericanDate(2000, 4, 10)
european = EuropeanDate(2000, 4, 10)
print(american.format())
print(european.format())
№4
class MinStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        if not self.numbers:
            return None
        return min(self.numbers)

class MaxStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        if not self.numbers:
            return None
        return max(self.numbers)

class AverageStat:
    def __init__(self):
        self.numbers = []

    def add_number(self, number):
        self.numbers.append(number)

    def result(self):
        if not self.numbers:
            return None
        return sum(self.numbers) / len(self.numbers)

# Ваш код

values = [1, 2, 4, 5]

mins = MinStat()
maxs = MaxStat()
average = AverageStat()
for v in values:
    mins.add_number(v)
    maxs.add_number(v)
    average.add_number(v)

print(mins.result(), maxs.result(), '{:<05.3}'.format(average.result()))
№5
class Table:
    def __init__(self, rows, cols):
        self.table = [[0] * cols for _ in range(rows)]
        self.rows = rows
        self.cols = cols

    def get_value(self, row, col):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            return self.table[row][col]
        else:
            return None

    def set_value(self, row, col, value):
        self.table[row][col] = value

    def n_rows(self):
        return self.rows

    def n_cols(self):
        return self.cols
tab = Table(3, 5)
tab.set_value(0, 1, 10)
tab.set_value(1, 2, 20)
tab.set_value(2, 3, 30)
for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
№6
class Rectangle:
    def __init__(self, x, y, w, h):
        self.x = x
        self.y = y
        self.w = w
        self.h = h

    def get_x(self):
        return self.x

    def get_y(self):
        return self.y

    def get_w(self):
        return self.w

    def get_h(self):
        return self.h

    def intersection(self, other):
        left = max(self.x, other.x)
        bottom = max(self.y, other.y)
        right = min(self.x + self.w, other.x + other.w)
        top = min(self.y + self.h, other.y + other.h)
        if left < right and bottom < top:
            return Rectangle(left, bottom, right - left, top - bottom)
        else:
            return None
# Ваш код

rect1 = Rectangle(0, 0, 10, 10)
rect2 = Rectangle(5, 5, 10, 10)
rect3 = rect1.intersection(rect2)

if rect3 is None:
    print('No intersection')
else:
    print(rect3.get_x(), rect3.get_y(), rect3.get_w(), rect3.get_h())
№7
class Table:
    def __init__(self, rows, cols):
        self.table = [[0] * cols for _ in range(rows)]
        self.rows = rows
        self.cols = cols

    def get_value(self, row, col):
        if 0 <= row < self.rows and 0 <= col < self.cols:
            return self.table[row][col]
        else:
            return None

    def set_value(self, row, col, value):
        self.table[row][col] = value

    def n_rows(self):
        return self.rows

    def n_cols(self):
        return self.cols

    def delete_row(self, row):
        if 0 <= row < self.rows:
            del self.table[row]
            self.rows -= 1
            for i in range(row, self.rows):
                for j in range(self.cols):
                    self.table[i][j] = self.table[i + 1][j]
        else:
            raise IndexError('Invalid row index')

    def delete_col(self, col):
        if 0 <= col < self.cols:
            for i in range(self.rows):
                del self.table[i][col]
            self.cols -= 1
            for i in range(col, self.cols):
                for j in range(self.rows):
                    self.table[j][i] = self.table[j][i + 1]
        else:
            raise IndexError('Invalid column index')

    def add_row(self, row):
        if 0 <= row <= self.rows:
            self.table.insert(row, [0] * self.cols)
            self.rows += 1
            for i in range(row + 1, self.rows):
                for j in range(self.cols):
                    self.table[i][j] = self.table[i - 1][j]
        else:
            raise IndexError('Invalid row index')

    def add_col(self, col):
        if 0 <= col <= self.cols:
            for i in range(self.rows):
                self.table[i].insert(col, 0)
            self.cols += 1
            for i in range(col + 1, self.cols):
                for j in range(self.rows):
                    self.table[j][i] = self.table[j][i - 1]
        else:
            raise IndexError('Invalid column index')
# Ваш код

tab = Table(3, 5)
tab.set_value(0, 1, 10)
tab.set_value(1, 2, 20)
tab.set_value(2, 3, 30)
for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
print()

tab.add_row(1)

for i in range(tab.n_rows()):
    for j in range(tab.n_cols()):
        print(tab.get_value(i, j), end=' ')
    print()
print()
№8
class Person:
    def __init__(self, first_name, middle_name, last_name, phones):
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.phones = phones

    def get_phone(self):
        return self.phones.get('private')

    def get_work_phone(self):
        return self.phones.get('work')

    def get_name(self):
        return f'{self.last_name} {self.first_name} {self.middle_name}'

    def get_sms_text(self):
        return f'Уважаемый {self.first_name} {self.middle_name}! Примите участие в нашем беспроигрышном конкурсе для физических лиц'


class Company:
    def __init__(self, name, type_, phones, *employees):
        self.name = name
        self.type_ = type_
        self.phones = phones
        self.employees = employees

    def get_phone(self):
        return self.phones.get('contact') or next((emp.get_work_phone() for emp in self.employees if emp.get_work_phone()), None)

    def get_name(self):
        return self.name

    def get_sms_text(self):
        return f'Для компании {self.name} есть супер предложение! Примите участие в нашем беспроигрышном конкурсе для {self.type_}'


def send_sms(*contacts):
    for contact in contacts:
        phone = contact.get_phone()
        if phone:
            print(f'Отправлено СМС на номер {phone} с текстом: {contact.get_sms_text()}')
        else:
            print(f'Не удалось отправить сообщение абоненту: {contact.get_name()}')
            # Ваш код

person1 = Person("Ivan", "Ivanovich", "Ivanov", {"private": 123, "work": 456})
person2 = Person("Ivan", "Petrovich", "Petrov", {"private": 789})
person3 = Person("Ivan", "Petrovich", "Sidorov", {"work": 789})
person4 = Person("John", "Unknown", "Doe", {})
company1 = Company("Bell", "ООО", {"contact": 111}, person3, person4)
company2 = Company("Cell", "АО", {"non_contact": 222}, person2, person3)
company3 = Company("Dell", "Ltd", {"non_contact": 333}, person2, person4)
send_sms(person1, person2, person3, person4, company1, company2, company3)
